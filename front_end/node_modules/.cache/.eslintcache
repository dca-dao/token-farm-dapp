[{"/home/louis/Projets/Solidity-course/token-farm-dapp/front_end/src/index.tsx":"1","/home/louis/Projets/Solidity-course/token-farm-dapp/front_end/src/reportWebVitals.ts":"2","/home/louis/Projets/Solidity-course/token-farm-dapp/front_end/src/App.tsx":"3","/home/louis/Projets/Solidity-course/token-farm-dapp/front_end/src/components/Header.tsx":"4","/home/louis/Projets/Solidity-course/token-farm-dapp/front_end/src/components/Main.tsx":"5","/home/louis/Projets/Solidity-course/token-farm-dapp/front_end/src/components/yourWallet/index.ts":"6","/home/louis/Projets/Solidity-course/token-farm-dapp/front_end/src/components/yourWallet/YourWallet.tsx":"7","/home/louis/Projets/Solidity-course/token-farm-dapp/front_end/src/components/yourWallet/StakeForm.tsx":"8","/home/louis/Projets/Solidity-course/token-farm-dapp/front_end/src/components/yourWallet/WalletBalance.tsx":"9","/home/louis/Projets/Solidity-course/token-farm-dapp/front_end/src/components/BalanceMsg.tsx":"10","/home/louis/Projets/Solidity-course/token-farm-dapp/front_end/src/hooks/index.ts":"11","/home/louis/Projets/Solidity-course/token-farm-dapp/front_end/src/hooks/useStakeTokens.ts":"12"},{"size":500,"mtime":1646139252000,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":1646139252000,"results":"15","hashOfConfig":"14"},{"size":539,"mtime":1647169945284,"results":"16","hashOfConfig":"14"},{"size":977,"mtime":1646139252000,"results":"17","hashOfConfig":"14"},{"size":2039,"mtime":1646139252000,"results":"18","hashOfConfig":"14"},{"size":42,"mtime":1646139252000,"results":"19","hashOfConfig":"14"},{"size":2287,"mtime":1646139252000,"results":"20","hashOfConfig":"14"},{"size":3600,"mtime":1646139252000,"results":"21","hashOfConfig":"14"},{"size":711,"mtime":1646139252000,"results":"22","hashOfConfig":"14"},{"size":806,"mtime":1646139252000,"results":"23","hashOfConfig":"14"},{"size":50,"mtime":1646139252000,"results":"24","hashOfConfig":"14"},{"size":2164,"mtime":1647170966532,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"inekn9",{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},"/home/louis/Projets/Solidity-course/token-farm-dapp/front_end/src/index.tsx",[],"/home/louis/Projets/Solidity-course/token-farm-dapp/front_end/src/reportWebVitals.ts",[],"/home/louis/Projets/Solidity-course/token-farm-dapp/front_end/src/App.tsx",[],"/home/louis/Projets/Solidity-course/token-farm-dapp/front_end/src/components/Header.tsx",[],"/home/louis/Projets/Solidity-course/token-farm-dapp/front_end/src/components/Main.tsx",["53"],"/* eslint-disable spaced-comment */\n/// <reference types=\"react-scripts\" />\nimport { useEthers } from \"@usedapp/core\"\nimport helperConfig from \"../helper-config.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { constants } from \"ethers\"\nimport brownieConfig from \"../brownie-config.json\"\nimport dapp from \"../dapp.png\"\nimport eth from \"../eth.png\"\nimport dai from \"../dai.png\"\nimport { YourWallet } from \"./yourWallet\"\nimport { makeStyles } from \"@material-ui/core\"\n\nexport type Token = {\n    image: string\n    address: string\n    name: string\n}\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        color: theme.palette.common.white,\n        textAlign: \"center\",\n        padding: theme.spacing(4)\n    }\n}))\n\nexport const Main = () => {\n    // Show token values from the wallet\n    // Get the address of different tokens\n    // Get the balance of the users wallet\n\n    // send the brownie-config to our `src` folder\n    // send the build folder\n    const classes = useStyles()\n    const { chainId, error } = useEthers()\n    const networkName = chainId ? helperConfig[chainId] : \"dev\"\n    let stringChainId = String(chainId)\n    const dappTokenAddress = chainId ? networkMapping[stringChainId][\"DappToken\"][0] : constants.AddressZero\n    const wethTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"weth_token\"] : constants.AddressZero // brownie config\n    const fauTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"fau_token\"] : constants.AddressZero\n\n    const supportedTokens: Array<Token> = [\n        {\n            image: dapp,\n            address: dappTokenAddress,\n            name: \"DAPP\"\n        },\n        {\n            image: eth,\n            address: wethTokenAddress,\n            name: \"WETH\"\n        },\n        {\n            image: dai,\n            address: fauTokenAddress,\n            name: \"DAI\"\n        }\n    ]\n\n    return (<>\n        <h2 className={classes.title}>Dapp Token App</h2>\n        <YourWallet supportedTokens={supportedTokens} />\n    </>)\n}\n","/home/louis/Projets/Solidity-course/token-farm-dapp/front_end/src/components/yourWallet/index.ts",[],"/home/louis/Projets/Solidity-course/token-farm-dapp/front_end/src/components/yourWallet/YourWallet.tsx",[],"/home/louis/Projets/Solidity-course/token-farm-dapp/front_end/src/components/yourWallet/StakeForm.tsx",["54","55"],"import React, { useState, useEffect } from \"react\"\nimport { Token } from \"../Main\"\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { Button, Input, CircularProgress, Snackbar } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport { useStakeTokens } from \"../../hooks\"\nimport { utils } from \"ethers\"\n\nexport interface StakeFormProps {\n    token: Token\n}\n\nexport const StakeForm = ({ token }: StakeFormProps) => {\n    const { address: tokenAddress, name } = token\n    const { account } = useEthers()\n    const tokenBalance = useTokenBalance(tokenAddress, account)\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    const { notifications } = useNotifications()\n\n    const [amount, setAmount] = useState<number | string | Array<number | string>>(0)\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newAmount = event.target.value === \"\" ? \"\" : Number(event.target.value)\n        setAmount(newAmount)\n        console.log(newAmount)\n    }\n\n    const { approveAndStake, state: approveAndStakeErc20State } = useStakeTokens(tokenAddress)\n    const handleStakeSubmit = () => {\n        const amountAsWei = utils.parseEther(amount.toString())\n        return approveAndStake(amountAsWei.toString())\n    }\n\n    const isMining = approveAndStakeErc20State.status === \"Mining\"\n    const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] = useState(false)\n    const [showStakeTokenSuccess, setShowStakeTokenSuccess] = useState(false)\n    const handleCloseSnack = () => {\n        setShowErc20ApprovalSuccess(false)\n        setShowStakeTokenSuccess(false)\n    }\n\n    useEffect(() => {\n        if (notifications.filter(\n            (notification) =>\n                notification.type === \"transactionSucceed\" &&\n                notification.transactionName === \"Approve ERC20 transfer\").length > 0) {\n            setShowErc20ApprovalSuccess(true)\n            setShowStakeTokenSuccess(false)\n        }\n        if (notifications.filter(\n            (notification) =>\n                notification.type === \"transactionSucceed\" &&\n                notification.transactionName === \"Stake Tokens\"\n        ).length > 0) {\n            setShowErc20ApprovalSuccess(false)\n            setShowStakeTokenSuccess(true)\n        }\n    }, [notifications, showErc20ApprovalSuccess, showStakeTokenSuccess])\n\n    return (\n        <>\n            <div>\n                <Input\n                    onChange={handleInputChange} />\n                <Button\n                    onClick={handleStakeSubmit}\n                    color=\"primary\"\n                    size=\"large\"\n                    disabled={isMining}>\n                    {isMining ? <CircularProgress size={26} /> : \"Stake!!!\"}\n                </Button>\n            </div>\n            <Snackbar\n                open={showErc20ApprovalSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack}\n            >\n                <Alert onClose={handleCloseSnack} severity=\"success\">\n                    ERC-20 token transfer approved! Now approve the 2nd transaction.\n                </Alert>\n            </Snackbar>\n            <Snackbar\n                open={showStakeTokenSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack}>\n                <Alert onClose={handleCloseSnack} severity=\"success\">\n                    Tokens Staked!\n                </Alert>\n            </Snackbar>\n        </>\n    )\n}\n","/home/louis/Projets/Solidity-course/token-farm-dapp/front_end/src/components/yourWallet/WalletBalance.tsx",[],"/home/louis/Projets/Solidity-course/token-farm-dapp/front_end/src/components/BalanceMsg.tsx",[],"/home/louis/Projets/Solidity-course/token-farm-dapp/front_end/src/hooks/index.ts",[],"/home/louis/Projets/Solidity-course/token-farm-dapp/front_end/src/hooks/useStakeTokens.ts",["56"],"import { useEffect, useState } from \"react\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport { constants, utils } from \"ethers\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\nimport ERC20 from \"../chain-info/contracts/MockERC20.json\"\nimport { Contract } from '@usedapp/core/node_modules/@ethersproject/contracts'\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nexport const useStakeTokens = (tokenAddress: string) => {\n    // address\n    // abi\n    // chainId\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n    const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface)\n\n    const erc20ABI = ERC20.abi\n    const erc20Interface = new utils.Interface(erc20ABI)\n    const erc20Contract = new Contract(tokenAddress, erc20Interface)\n    // approve\n    const { send: approveErc20Send, state: approveAndStakeErc20State } =\n        useContractFunction(erc20Contract, \"approve\", {\n            transactionName: \"Approve ERC20 transfer\",\n        })\n    const approveAndStake = (amount: string) => {\n        setAmountToStake(amount)\n        return approveErc20Send(tokenFarmAddress, amount)\n    }\n    // stake\n    const { send: stakeSend, state: stakeState } =\n        useContractFunction(tokenFarmContract, \"stakeTokens\", {\n            transactionName: \"Stake Tokens\",\n        })\n    const [amountToStake, setAmountToStake] = useState(\"0\")\n\n    //useEffect\n    useEffect(() => {\n        if (approveAndStakeErc20State.status === \"Success\") {\n            stakeSend(amountToStake, tokenAddress)\n        }\n    }, [approveAndStakeErc20State, amountToStake, tokenAddress])\n\n\n    const [state, setState] = useState(approveAndStakeErc20State)\n\n    useEffect(() => {\n        if (approveAndStakeErc20State.status === \"Success\") {\n            setState(stakeState)\n        } else {\n            setState(approveAndStakeErc20State)\n        }\n    }, [approveAndStakeErc20State, stakeState])\n\n    return { approveAndStake, state }\n}\n",{"ruleId":"57","severity":1,"message":"58","line":36,"column":22,"nodeType":"59","messageId":"60","endLine":36,"endColumn":27},{"ruleId":"57","severity":1,"message":"61","line":15,"column":36,"nodeType":"59","messageId":"60","endLine":15,"endColumn":40},{"ruleId":"57","severity":1,"message":"62","line":18,"column":11,"nodeType":"59","messageId":"60","endLine":18,"endColumn":40},{"ruleId":"63","severity":1,"message":"64","line":43,"column":8,"nodeType":"65","endLine":43,"endColumn":64,"suggestions":"66"},"@typescript-eslint/no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'name' is assigned a value but never used.","'formattedTokenBalance' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'stakeSend'. Either include it or remove the dependency array.","ArrayExpression",["67"],{"desc":"68","fix":"69"},"Update the dependencies array to be: [approveAndStakeErc20State, amountToStake, tokenAddress, stakeSend]",{"range":"70","text":"71"},[1756,1812],"[approveAndStakeErc20State, amountToStake, tokenAddress, stakeSend]"]